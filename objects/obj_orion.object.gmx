<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_orion0000_standRight</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>-1</persistent>
  <parentName>par_hero</parentName>
  <maskName>spr_orionCollision</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Character Variables

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//The following code is used to initialize the variables for a given character, depending on which       //
//character's code the script is listed under. They are made generic so that each character can operate  //
//with the same basic code and be made essentially different by changing the values of the variables here//
///////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////
//Important Abbreviations//
//R = rate               //
//Spd = speed            //
//F = force              //
//Ref = reference        //
///////////////////////////

//////////////////////////////////////////Character Stats//////////////////////////////////////////////////
//"Character Stats" is the section for variables relating to the character's personal attributes, esp.   //
//those variables which don't change midgame for them.                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////

var_stat_grav = 0.175;               //What degree of force pulls the character downwards
var_stat_maxFallSpd = 15;            //How fast the character can fall
var_stat_accel = 0.25;               //How quickly the character accelerates left or right when the keys are pressed (under most circumstances)
var_stat_maxWalkSpd = 1.5;           //How fast the character can walk
var_stat_maxRunSpd      = 4;         //How fast the character can run
var_stat_maxCrouchSprintSpd = 2.5;   //How fast the character can crouch-sprint
var_stat_maxSprintSpd = 5;           //How fast the character can sprint
var_stat_standardJumpF  = 4.2;       //How high the character jumps without their suit's aid in pixels per frame before gravity works against that speed
var_stat_staminaRegenR  = 0.5;       //How much Stamina is regenerated per frame (assuming that staminaregen is equal to 1)


/////////////////////////////////////////Equipment Stats//////////////////////////////////////////////////
//"Equipment Stats" is the section for variables relating to the character's equipment (worn items).    //
//These stats are likely to change when a character equips different armour.                            //
//////////////////////////////////////////////////////////////////////////////////////////////////////////

var_equip_armour    = 1;            //Used as a divisor in the script for taking damage

//NOTE: we may wish to write a single step code for taking damage and create a damage variable which affects health after armour modifications

var_equip_coolR     = 1.5;          //How much heat is reduced per frame (because higher heat is worse!)
var_equip_bootHeat1 = 5;            //How much heat your boots gain from a jump off of the ground
var_equip_bootHeat2 = 90;          //How much heat your boots gain from a double jump (so an aerial jump)
var_equip_bootDrain = 0.05;         //How much battery is drained when you jump (this number is multiplied for special kinds of jumping so all battery drains from jumps are derived from just one stat)
var_equip_jetJumpF  = 6;            //How high the character jumps with rocket boots in pixels per frame before gravity works against that speed
var_equip_jetDJumpF = 6.5;          //How high the player jumps aerially with rocket boots in pixels per frame before gravity works against that speed
var_equip_maxJumps  = 100;          //Number of jumps the character can make without touching the ground, jumps off of the ground count towards this as well


///////////////////////////////////////Misc Variables/////////////////////////////////////////////////////
//"Misc Variables" include anything that needs definition when the character is created and is not      //
//static given that character's stats and equipment. Things like the character's current speed and what //
//direction the characcter is facing. Most of these variables change constantly within step events.     //
//////////////////////////////////////////////////////////////////////////////////////////////////////////

var_hsp = 0;                  //Substituted for the "hspeed" variable. Written in shorthand to save space and time
var_hspCarry = 0;             //Assigned by moving platforms to add to current var_hsp so that horizontal speed is relative as opposed to being replaced by the speed of the platform
var_vsp = 0;                  //Substituted for the "vspeed" variable. Written in shorthand to save space and time
var_jumpNumber = 1;           //Counts number of jumps made before landing, used along with maxjumps to determine when character can't jump again (before touching the gronud)
var_action = 1;               //Defines what kind of action the character is involved in, depending on this variable the character operates very differently during the step event, 1 = Normal  2 = Ledgegrab  3 = Crouch  4 = Sprint 5 = Longjump
var_regenStaminaCheck = -1;   //Used as a countdown when stamina is not supposed to regenerate for a moment, reduced by 1 each step. Once it equals 0, staminaregen returns to 1. If it is greater than 0, staminaregen becomes 0.
var_heatCoolCheck = -1        //Functions just as "staminaregencheck" (see above) but works in conjunction with healcooldown
var_yPlus = 0;                //Used in the code for characters moving up slopes-- adjusted each step based on the angle of the slope so that the character always moves up the appropriate number of pixels (equal to whatever yplus is that step)
var_yMinus = 0;               //Used in the code for characters moving down slopes-- adjusted each step based on the angle of the slope so that the character always moves down the appropriate number of pixels (equal to whatever yminus is that step)
var_facing = 1;               //Tells the program which way the character is facing, 1 = Facing Right, -1 = Facing Left

///////////////////////////////////////Boolean Variables//////////////////////////////////////////////////
//"Boolean Variables" include any boolean (that is true or false) variable used to define the behaviours//
//of the character.                                                                                     //
//////////////////////////////////////////////////////////////////////////////////////////////////////////

var_bool_grounded = 0;             //Shorthand variable for whether the character is standing on solid ground; 0 = aerial, 1 = on solid ground
var_bool_regenStamina = 1;         //Whether or not to regenerate stamina, 0 = stamina will not regenerate this step, 1 = stamina will regenerate this step
var_bool_heatCool = 1;             //Whether or not to reduce heat, 0 = heat will not cool down this tep, 1 = heat will cool down this step
var_bool_onSlope = 0;              //Whether Orion is on a slope

///////////////////////////////////////Animation/////////////////////////////////////////////////////////
//"Animation" variables are used as timers to tell the character when to switch from one sprite set to //
//another. Most are used as a counter of each sprite so that an animation stops when there are no      //
//sprites left in the animation. All are set to 0 at the start.                                        //
/////////////////////////////////////////////////////////////////////////////////////////////////////////

var_anim_ledgeSwing = 0;           //Used to animate slight swaying on ledges
var_anim_crouch = 0;               //Animate going into crouch, but only when appropriate
var_anim_standup = 0;              //Animate standing from a crouch
var_anim_jetJump = 0;              //Used for the start of the jet jump animation 
var_anim_repulsorJump = 0;         //Used for start of the repulsor jump animation
var_anim_climb = 0;                //For the steps during the climb ledge animation 
var_anim_standardJump = 0;         //Whether doing a normal jump, instead of a jet jump (for animations)
var_anim_longJump = 0;             //Detects whether the character, mid action 5, has already finished the long jump animation (thereby allowing for regular jet jumps)

///////////////////////////////////////HUD Variables/////////////////////////////////////////////////////
//"HUD Variables" are the variables which are openly displayed to the player in the HUD.               //
/////////////////////////////////////////////////////////////////////////////////////////////////////////

var_hud_hp = 100;
var_hud_stamina = 100;
var_hud_battery = 100;
var_hud_heat = 0;

//Double tap alarms
//Up = Alarm 2
//Down = Alarm 3
//Left = Alarm 4
//Right = Alarm 5


//*****************************************************************************************************//
///////////////////////////////////Initialize Reference Variables////////////////////////////////////////
//*****************************************************************************************************//
//"Reference Variables" are used as placeholders for data from other variables, particularly a         //
//character's unique stats. A reference variable will take the value of another variable and store it  //
//during processes where the stat is temporarilly changed.                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////
              
var_ref_maxFallSpd = var_stat_maxFallSpd;                   //Used as a reference for maxSpd-- a placeholder to temporarily save maxFallSpd if it must be altered
var_ref_maxSprintSpd = var_stat_maxSprintSpd;               //Used as a reference for maxSprintSpd-- a placeholder to temporarily save maxSprintSpd if it must be altered
var_ref_maxCrouchSprintSpd = var_stat_maxCrouchSprintSpd;   //Used as a reference for crouchSprintSpd-- a placeholder to temporarily save crouchSprintSpd if it must be altered
var_ref_maxRunSpd = var_stat_maxRunSpd;                     //Used as a reference for maxRunSpd-- a placeholder to temporarily save maxRunSpd if it must be altered
var_ref_maxRunSpd2 = var_stat_maxRunSpd;                    //See above

///////////////////////////////////Dependent Variables///////////////////////////////////////////////////
//"Dependent Variables" are defined in the 'Initialize Character Variables' script but require other,  //
//independent variables as a part of their calculation. For this reason, dependent variables are       //
//initialized last.                                                                                    //
/////////////////////////////////////////////////////////////////////////////////////////////////////////

var_dep_maxLongJumpSpd = var_equip_jetJumpF +1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Sprites
//Jet Jump
var_spr_jetJumpRightStart       = spr_orion0000_jetJumpRightStart
var_spr_jetJumpLeftStart        = spr_orion0000_jetJumpLeftStart
var_spr_jetJumpRightPeak        = spr_orion0000_jetJumpRightPeak
var_spr_jetJumpLeftPeak         = spr_orion0000_jetJumpLeftPeak
var_spr_jetJumpRightUp          = spr_orion0000_jetJumpRightUp
var_spr_jetJumpLeftUp           = spr_orion0000_jetJumpLeftUp
var_spr_jetJumpRightDown        = spr_orion0000_jetJumpRightDown
var_spr_jetJumpLeftDown         = spr_orion0000_jetJumpLeftDown

//Repulsor Jump
var_spr_repulsorJumpRightStart  = spr_orion0000_repulsorJumpRightStart
var_spr_repulsorJumpLeftStart   = spr_orion0000_repulsorJumpLeftStart

//Long Jump
var_spr_longJumpRight           = spr_orion0000_longJumpRight
var_spr_longJumpLeft            = spr_orion0000_longJumpLeft

//Normal Jump
var_spr_normalJumpRight         = spr_orion0000_normalJumpRight
var_spr_normalJumpLeft          = spr_orion0000_normalJumpLeft

//Normal Jump
var_spr_leapRight               = spr_orion0000_leapRight
var_spr_leapLeft                = spr_orion0000_leapLeft

//Idle
var_spr_standRight              = spr_orion0000_standRight
var_spr_standLeft               = spr_orion0000_standLeft

//Walk
var_spr_walkRight               = spr_orion0000_walkRight
var_spr_walkLeft                = spr_orion0000_walkLeft
var_spr_walkRightUpSlope        = spr_orion0000_walkRightUpSlope
var_spr_walkLeftUpSlope         = spr_orion0000_walkLeftUpSlope
var_spr_walkRightDownSlope      = spr_orion0000_walkRightDownSlope
var_spr_walkLeftDownSlope       = spr_orion0000_walkLeftDownSlope

//Run
var_spr_runRight                = spr_orion0000_runRight
var_spr_runLeft                 = spr_orion0000_runLeft
var_spr_runRightUpSlope         = spr_orion0000_runRightUpSlope
var_spr_runLeftUpSlope          = spr_orion0000_runLeftUpSlope
var_spr_runRightDownSlope       = spr_orion0000_runRightDownSlope
var_spr_runLeftDownSlope        = spr_orion0000_runLeftDownSlope

//Sprint
var_spr_sprintRight             = spr_orion0000_sprintRight
var_spr_sprintLeft              = spr_orion0000_sprintLeft
var_spr_sprintRightUpSlope      = spr_orion0000_sprintRightUpSlope
var_spr_sprintLeftUpSlope       = spr_orion0000_sprintLeftUpSlope
var_spr_sprintRightDownSlope    = spr_orion0000_sprintRightDownSlope
var_spr_sprintLeftDownSlope     = spr_orion0000_sprintLeftDownSlope

//Ledge
var_spr_ledgeHangRight          = spr_orion0000_ledgeHangRight
var_spr_ledgeHangLeft           = spr_orion0000_ledgeHangLeft
var_spr_ledgeSwingRight         = spr_orion0000_ledgeSwingRight
var_spr_ledgeSwingLeft          = spr_orion0000_ledgeSwingLeft
var_spr_ledgeClimbRight         = spr_orion0000_ledgeClimbRight
var_spr_ledgeClimbLeft          = spr_orion0000_ledgeClimbLeft

//Crouching
var_spr_crouchRight             = spr_orion0000_crouchRight
var_spr_crouchLeft              = spr_orion0000_crouchLeft
var_spr_standupRight            = spr_orion0000_standupRight
var_spr_standupLeft             = spr_orion0000_standupLeft

//Crouch Walking
var_spr_crouchWalkRight         = spr_orion0000_crouchWalkRight
var_spr_crouchWalkLeft          = spr_orion0000_crouchWalkLeft
var_spr_crouchWalkRightUpSlope  = spr_orion0000_crouchWalkRightUpSlope
var_spr_crouchWalkLeftUpSlope   = spr_orion0000_crouchWalkLeftUpSlope
var_spr_crouchWalkRightDownSlope= spr_orion0000_crouchWalkRightDownSlope
var_spr_crouchWalkLeftDownSlope = spr_orion0000_crouchWalkLeftDownSlope

//Crouch Sprinting
var_spr_crouchSprintRight       = spr_orion0000_crouchSprintRight
var_spr_crouchSprintLeft        = spr_orion0000_crouchSprintLeft

//Initialize Masks
var_spr_collision               = spr_orionCollision
var_spr_crouchCollision         = spr_orionCollisionCrouch
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Sounds
//Jump sounds
snd_jet1 = snd_orionJet1
snd_jet2 = snd_orionJet2
snd_jet3 = snd_orionJet3
snd_jet4 = snd_orionJet4
snd_pressure1 = snd_orionPressure1
snd_pressure2 = snd_orionPressure2
snd_pressure3 = snd_orionPressure3
snd_pressure4 = snd_orionPressure4
snd_repulsor1 = snd_orionRepulsor1
snd_repulsor2 = snd_orionRepulsor2
snd_repulsor3 = snd_orionRepulsor3
snd_repulsor4 = snd_orionRepulsor4
snd_longjump = snd_orionLongJump
snd_grunt1 = snd_orionGrunt1
snd_grunt2 = snd_orionGrunt2
snd_grunt3 = snd_orionGrunt3
snd_grunt4 = snd_orionGrunt4
snd_grunt5 = snd_orionGrunt5

//Footstep Sounds

Footsteptest = snd_footStep
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Slope Status
var_bool_onSlope = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Doubletap Right
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Doubletap Left
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Doubletap Down
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Doubletap Up
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finish Climbing Ledge
var_action = 1
var_anim_climb = 0
var_bool_grounded = 1
if var_facing = 1
{
    y -= 50
    x += 16
}
else
{
    y -= 50
    x -= 16
}
            var_yMinus = 0;
            while (!place_meeting(x,y+1+var_yMinus,par_block) &amp;&amp; var_yMinus &lt;= abs(var_stat_maxRunSpd)) var_yMinus += 1;
            if (place_meeting(x,y+1+var_yMinus,par_block))
            y += var_yMinus;
var_bool_grounded = 1
if keyboard_check(vk_right) and !keyboard_check(vk_left) //Set Facing
var_bool_faceRight = 1
if !keyboard_check(vk_right) and keyboard_check(vk_left)
var_bool_faceRight = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset jump animation
var_anim_jetJump = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if Grounded
//Get Platform id
var plat;
plat = instance_place(x,y+1+var_vsp,par_platform)

//Determine if on ground
if !place_meeting(x,y+1,par_block)
{
    var_bool_grounded = 0
}
if place_meeting(x,y+1,par_block)
{
    var_bool_grounded = 1
}
if plat != noone
{
    if place_meeting(x,y+1,par_platform) 
    {
        if bbox_bottom &lt; plat.y
        var_bool_grounded = 1
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Step Variables

var_yPlus = 0
var_yMinus = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check left/right/doubletaps, set misc vars

//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);

//Check for Doubletaps
if keyboard_check_pressed(vk_up)
{
    if alarm[2] = -1
    alarm[2] = 16
    else
    alarm[2] = -1
}
if keyboard_check_pressed(vk_down)
{
    if alarm[3] = -1
    alarm[3] = 16
    else
    alarm[3] = -1
}
if keyboard_check_pressed(vk_left)
{
    if alarm[4] = -1
    alarm[4] = 16
    else
    alarm[4] = -1
}
if keyboard_check_pressed(vk_right)
{
    if alarm[5] = -1
    alarm[5] = 16
    else
    alarm[5] = -1
}

//Aerial speed decay when over maximum intended horizontal speed in air
if var_bool_grounded = 0
    script_execute(scr_pc_aerialSpdDecay, var_hspCarry)

//Resets the standard jump's animation whenever the character is standing on the ground
if var_bool_grounded = 1
    var_anim_standardJump = 0

//Set Facing
if var_action = 1 or var_action = 3 or var_action = 4 //If you are in a normal state or crouching or sprinting
    script_execute(scr_pc_facing, var_facing)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stamina Regen, Heat Cooldown, and HUD Caps

//HUD caps
if var_hud_heat &gt; 100 var_hud_heat = 100
if var_hud_heat &lt; 0 var_hud_heat = 0
if var_hud_stamina &gt; 100 var_hud_stamina = 100
if var_hud_stamina &lt; 0 var_hud_stamina = 0
if var_hud_battery &gt; 100 var_hud_battery = 100
if var_hud_battery &lt; 0 var_hud_battery = 0

//Stamina Regen

if var_bool_regenStamina = 1
{
    if var_hud_stamina &lt; 100
    {
        var_hud_stamina += var_stat_staminaRegenR
    }
}

//Count down until able to regenerate
if var_regenStaminaCheck &gt; -1
var_regenStaminaCheck -= 1

if var_regenStaminaCheck = 0
var_bool_regenStamina = 1
if var_regenStaminaCheck &gt; 0
var_bool_regenStamina = 0

//Heat Cooldown

if var_bool_heatCool = 1
{
    if var_hud_heat &gt; 0
    {
        var_hud_heat -= var_equip_coolR
    }
}

//Count down until able to cooldown
if var_heatCoolCheck &gt; -1
var_heatCoolCheck -= 1

if var_heatCoolCheck = 0
var_bool_heatCool = 1
if var_heatCoolCheck &gt; 0
var_bool_heatCool = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action 1: Standard

//////////////////////////////////////////Action 1/////////////////////////////////////////////////////////
//Action 1 is the script that runs for a character whenever they are not engaged in a behaviour that     //
//changes the responses of the game controls. In "action 1" (standard), a character runs, jumps, walks,  //
//and accesses most other actions. Were the character crouching, sprinting, hanging on a ladder or ledge,//
//etc. they would behave based on a different action script.                                             //
///////////////////////////////////////////////////////////////////////////////////////////////////////////

if var_action = 1      //If you are in a normal state

{
var_anim_climb = 0          //Safegaurd infinite climb glitch, don't ask
var_anim_ledgeSwing = 0     //So that when you grab a ledge again, animations will work properly
var plat = instance_place(x, y + 1 + var_vsp, par_platform);       //Store platform collision information, taking vertical speed into account

////////////////////////////////////////Sprint Check//////////////////////////////////////////////////////

//Sprinting Right-----------------------------------------------------------------------------------------
if keyboard_check_pressed(vk_right)                 //If the button for going right is pressed
{
    if alarm[5] &lt; 0                                 //And the alarm detecting whether five frames have passed since the last press of the button hasn't rung
    {
        if var_bool_grounded = 1                    //And if the character is actually on the ground
        {
            if var_move = 0                             //And the left key is not being pressed
            {
                var_action = 4                          //Switch to action 4 (sprinting)
            }
        }
    }
}
//Sprinting Left------------------------------------------------------------------------------------------
if keyboard_check_pressed(vk_left)              //If the button for going left is pressed
{
    if alarm[4] &lt; 0                             //And the alarm detecting whether five frames have passed since the last press of the button hasn't rung
    {
        if var_bool_grounded = 1                //And if the character is actually on the ground
        {
            if var_move = 0                     //And the left key is not being pressed
            {
                var_action = 4                  //Switch to action 4 (sprinting)
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

//Reset viewspeed
if var_action != 5                                 //Unless longjumping (because longjumping moves the character much faster than the camera normally scrolls for a few frames)
view_hspeed = -1                                   //The maximum horizontal speed of the view is infinite

//Move Left and Right
var_move = key_left + key_right;              //key_left when active becomes -1, key_right when active becomes 1, so thereby when pressing both keys or no keys 'move' becomes 0
if var_move = 0                               //
{
    if var_bool_grounded = 1
    {
        if place_meeting(x,y+1,obj_iceblock)
        {
            var var_fric //Friction on the Ice
            var_fric = 0.01
            if abs(var_hsp) &gt; var_fric then var_hsp = var_hsp*(1-var_fric) 
            else var_hsp = 0
        }
        else
        {
            var var_fric //Friction on the ground
            var_fric = 0.2
            if abs(var_hsp) &gt; var_fric then var_hsp = var_hsp*(1-var_fric) 
            else var_hsp = 0
        }
    }
}
else
{
    //Accelerate when on ground, slower when in air
    if (place_meeting(x,y+1,par_block)) or (plat != noone and (place_meeting(x,y+1,par_platform))) and bbox_bottom &lt; plat.y
    {
        if !place_meeting(x,y+1,obj_iceblock)
        var_hsp += var_move * var_stat_accel
        else
        var_hsp += var_move * (var_stat_accel/4)
    }    
    else var_hsp += var_move * var_stat_accel/2.2
}

//Set Gravity and Limit Vspeed
if var_vsp &lt; var_stat_maxFallSpd 
    var_vsp += var_stat_grav;

//Jump (jets)
if keyboard_check_pressed(ord("S")) and var_hud_battery &gt; 0
    script_execute(scr_pc_jetJump, var_bool_grounded, var_anim_jetJump, var_anim_standardJump, var_vsp, var_equip_jetJumpF, var_hud_heat, var_equip_bootHeat1, var_hud_battery, var_equip_bootDrain, var_jumpNumber, var_equip_maxJumps, var_equip_bootHeat2, var_equip_jetDJumpF)

//Standard Jump
if keyboard_check_pressed(ord("A"))
{
   script_execute(scr_pc_jumpStandard, var_bool_grounded, var_vsp, var_stat_standardJumpF, var_anim_jetJump, var_anim_standardJump, var_hud_stamina, var_bool_regenStamina)
}

//Variable Jump Height on key release
if keyboard_check_released(ord("S")) and var_anim_standardJump = 0
{
    if var_vsp &lt; -2.5
    var_vsp = -2.5
}
if keyboard_check_released(ord("A")) and var_anim_standardJump = 1
{
    if var_vsp &lt; -2.5
    var_vsp = -2.5
}


//Reset Double Jump
if var_bool_grounded = 1
var_jumpNumber = 1

//Hold Shift to walk
if keyboard_check(vk_shift) and var_bool_grounded = 1
var_ref_maxRunSpd = var_stat_maxWalkSpd * 0.75
else
var_ref_maxRunSpd = var_ref_maxRunSpd2

//Limit hspeed
if var_hsp &gt; var_stat_maxRunSpd then var_hsp = var_stat_maxRunSpd
if var_hsp &lt; -var_stat_maxRunSpd then var_hsp = -var_stat_maxRunSpd

//Include platform movement
var var_hspFinal = var_hsp + var_hspCarry;

//Horizontal Collision
if place_meeting(x+var_hspFinal,y,par_block)
{
            var_yPlus = 0;
    while (place_meeting(x+var_hspFinal,y-var_yPlus,par_block) &amp;&amp; var_yPlus &lt;= abs(var_stat_maxRunSpd*2)) var_yPlus += 0.5;
    if place_meeting(x+var_hspFinal,y-var_yPlus,par_block)
    {
        while(!place_meeting(x+sign(var_hspFinal),y,par_block)) //Collisions
        {
            x += sign(var_hspFinal);
        }
        var_hspFinal = 0;
        var_hsp = 0;
        var_hspCarry = 0;
    }
    else
    {
        y-= var_yPlus;
    }
    if var_yPlus &gt;= (var_ref_maxRunSpd * 0.5) var_stat_maxRunSpd = (var_ref_maxRunSpd * 0.75)
    if var_yPlus &gt;= (var_ref_maxRunSpd * 0.75) var_stat_maxRunSpd = (var_ref_maxRunSpd * 0.5)
}
else
{
    var_stat_maxRunSpd = var_ref_maxRunSpd
    if (place_meeting(x,y+1,par_block))  //Downward Slopes
    {
        if (!place_meeting(x+var_hspFinal,y,par_block))
        {
            var_yMinus = 0;
            while (!place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block) &amp;&amp; var_yMinus &lt;= abs(var_stat_maxRunSpd*2)) var_yMinus += 0.5;
            if (place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block))
            y+= var_yMinus;
        }
        if var_yMinus &gt;= (var_stat_maxRunSpd * 0.75) var_stat_maxRunSpd = (var_ref_maxRunSpd * 0.75)
    }
}
x += var_hspFinal;

//Vertical Collision
if place_meeting(x,y+var_vsp,par_block)
{
    while(!place_meeting(x,y+sign(var_vsp),par_block))
    {
        y += sign(var_vsp);
        audio_play_sound(Footsteptest,10,false) //Play Landing Sound
    }
    if var_vsp &gt;= (var_stat_maxFallSpd)
    {
        var_hud_hp -= 20
    }
    var_vsp = 0;
    var_hspCarry = 0;
    var_bool_grounded = 1
}

//Ledge Grab Check
if var_vsp &gt; 0
{
if keyboard_check(vk_right) //Grab Right
    {
        if place_meeting(x+1,(y-sprite_height/2)+var_vsp+1,par_block)
        {
            if !place_meeting(x+1,y-sprite_height/2+1,par_block)
            {
                while(!place_meeting(x+1,(y-sprite_height/2)+1,par_block))
                {
                    y += sign(var_vsp);
                }
                var_action = 2
                image_speed = 0.5
                var_vsp = 0;
            }
        }
    }
if keyboard_check(vk_left) //Grab Left
    {
        if place_meeting(x-1,(y-sprite_height/2)+var_vsp+1,par_block)
        {
            if !place_meeting(x-1,y-sprite_height/2+1,par_block)
            {
                while(!place_meeting(x-1,y-sprite_height/2+1,par_block))
                {
                    y += sign(var_vsp);
                }
                var_action = 2
                image_speed = 0.5
                var_vsp = 0;
            }
        }
    }
}

if plat != noone 
{
    if place_meeting(x,y+var_vsp,par_platform) and var_vsp &gt; 0
    {
        if bbox_bottom &lt; plat.y
        {
            while(!place_meeting(x, y + sign(var_vsp), plat))
            {
                y += sign(var_vsp);
                audio_play_sound(Footsteptest, 10, false) //Play Landing Sound
            }
            var_vsp = 0;
            var_hspCarry = 0;
            var_bool_grounded = 1;
        }
    }
}

//Collision with Jumpthrough Platform
//if place_meeting(x,y+var_vsp,par_platform) and var_vsp &gt; 0
//{
//    if plat != noone
//    {
//        if bbox_bottom &lt; plat.y
//        {
//            while(!place_meeting(x,y+sign(var_vsp),par_platform))
//            {
//                y += sign(var_vsp);
//                audio_play_sound(Footsteptest,10,false) //Play Landing Sound
//            }
//            var_vsp = 0;
//            var_hspCarry = 0;
//            var_bool_grounded = 1
//        }
//    }
//}
y += var_vsp;

//Check for crouch
if keyboard_check_pressed(vk_down)
{
    if alarm[3] &lt; 0
    {
        if var_bool_grounded = 1
        {
            if var_move = 0
            {
                var_action = 3
                var_anim_crouch = 1
                image_speed = 0.5
                image_index = 0
            }
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action 2: Ledge Grabbing

//////////////////////////////////////////Action 2/////////////////////////////////////////////////////////
//Action 2 is the script that runs for a character as they hang off of a cliff with their appendages.    //
//It does not allow them much freedom of movement, although they should be able to use one handed weapons//
//while they hang.                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////

if var_action = 2           //The following program applies only when the character's action variable is two
{
var_anim_standardJump = 0   //Ends the regular jump animation to avoid overlap
var_jumpNumber = 1          //Resets the jump counter, but not to zero. Since the character has not quite "landed"

/////////////////////////////////////////////Climbing up///////////////////////////////////////////////////

if keyboard_check(vk_up) and (keyboard_check_pressed(ord("S")) or keyboard_check_pressed(ord("A"))) and var_hud_stamina &gt;= 10
{                           //When the character is physically capable of climbing and the button to do so is pressed
    if var_anim_climb = 0   //When the character is not yet climbing (that is the sprite has not started animating)
    {
        if var_facing = 1   
        {
            if !place_meeting(x+16,y-50,par_block) and !place_meeting(x+16,y-sprite_height/2-2,par_block)
            {
                var_anim_climb = 1
                image_index = 0
                var_hud_stamina -= 10
                var_regenStaminaCheck = 120
            }
        }
        else if var_facing = -1
        {
            if !place_meeting(x-16,y-50,par_block) and !place_meeting(x-16,y-sprite_height/2-2,par_block)
            {
                var_anim_climb = 1
                image_index = 0
                var_hud_stamina -= 10
                var_regenStaminaCheck = 120
            }
        }
    }
}


if keyboard_check_pressed(ord("S")) and var_anim_climb = 0 and var_hud_battery &gt; 0
{
    if keyboard_check(vk_down) //Let go of Ledge
    {
        var_action = 1
        if keyboard_check(vk_right) and !keyboard_check(vk_left)
        var_facing = 1
        if !keyboard_check(vk_right) and keyboard_check(vk_left)
        var_facing = -1
    }
    else if var_hud_heat &lt; (101 - var_equip_bootHeat2)
    {   
        audio_play_sound(choose(snd_jet1,snd_jet2,snd_jet3,snd_jet4),10,false) //Otherwise, jump
        var_action = 1
        var_anim_jetJump = 1
        alarm[0]=8
        var_vsp -= var_equip_jetJumpF
        var_bool_grounded = 0
        var_hud_heat += var_equip_bootHeat2
        var_hud_battery -= var_equip_bootDrain
        if keyboard_check(vk_right) and !keyboard_check(vk_left)
        var_facing = 1
        if !keyboard_check(vk_right) and keyboard_check(vk_left)
        var_facing = -1
    }
}
if keyboard_check_pressed(ord("A")) and var_anim_climb = 0
{
    if keyboard_check(vk_down) //Let go of Ledge (Normal jump key)
    {
        var_action = 1
        if keyboard_check(vk_right) and !keyboard_check(vk_left)
        var_facing = 1
        if !keyboard_check(vk_right) and keyboard_check(vk_left)
        var_facing = -1
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action 3: Crouching
//Crouching
if var_action = 3
{

//Crouch Sprint Check
if keyboard_check_pressed(vk_right) //Check to Crouch Sprint Right
{
    if alarm[5] &lt; 0
    {
        if var_bool_grounded = 1
        {
            if var_move = 0
            {
                var_action = 6
            }
        }
    }
}
if keyboard_check_pressed(vk_left) //Check to Crouch Sprint Left
{
    if alarm[4] &lt; 0
    {
        if var_bool_grounded = 1
        {
            if var_move = 0
            {
                var_action = 6
            }
        }
    }
}

//Move Left and Right
var_move = key_left + key_right; 
if var_move = 0
{
    if var_bool_grounded = 1
    {
        if place_meeting(x,y+1,obj_iceblock)
        {
            var var_fric //Friction on the Ice
            var_fric = 0.01
            if abs(var_hsp) &gt; var_fric then var_hsp=var_hsp*(1-var_fric) 
            else var_hsp = 0
        }
        else
        {
            var var_fric //Friction on the ground
            var_fric = 0.2
            if abs(var_hsp) &gt; var_fric then var_hsp=var_hsp*(1-var_fric) 
            else var_hsp = 0
        }
    }
}
else
{
    //Accelerate when on ground
    if !place_meeting(x,y+1,obj_iceblock)
    var_hsp += var_move * var_stat_accel
    else
    var_hsp += var_move * (var_stat_accel/4)  
}

//Jump Out of Crouch
if keyboard_check_pressed(ord("S")) and !place_meeting(x,y-23,par_block) 
{
    if var_bool_grounded = 1
    {
        if place_meeting(x,y+1,par_platform) and keyboard_check(vk_down) //Fall through platforms if holding down while jumping on one
        {
            y+=1
            var_bool_grounded = 0
        }
        else
        {
            var_action = 1
            script_execute(scr_pc_jetJump, var_bool_grounded, var_anim_jetJump, var_anim_standardJump, var_vsp, var_equip_jetJumpF, var_hud_heat, var_equip_bootHeat1, var_hud_battery, var_equip_bootDrain, var_jumpNumber, var_equip_maxJumps, var_equip_bootHeat2, var_equip_jetDJumpF)
        }
    }
}
//Normal Jump out of crouch
if keyboard_check_pressed(ord("A"))
{
    if var_bool_grounded = 1
    {
        if place_meeting(x,y+1,par_platform) and keyboard_check(vk_down) //Fall through platforms if holding down while jumping on one
        {
            y+=1
            var_bool_grounded = 0
        }
        else
        {
            alarm[0]=2
            var_vsp -= var_stat_standardJumpF
            var_anim_jetJump = 1
            var_anim_standardJump = 1
            var_bool_grounded = 0
        }
    }
}

//Limit hspeed
if var_hsp &gt; var_stat_maxRunSpd/3 then var_hsp = var_stat_maxRunSpd/3
if var_hsp &lt; -var_stat_maxRunSpd/3 then var_hsp = -var_stat_maxRunSpd/3

//Include platform movement
var var_hspFinal = var_hsp + var_hspCarry;

//Horizontal Collision
if place_meeting(x+var_hspFinal,y,par_block)
{
    var_yPlus = 0;
    while (place_meeting(x+var_hspFinal,y-var_yPlus,par_block) &amp;&amp; var_yPlus &lt;= abs(var_stat_maxRunSpd*2)) var_yPlus += 0.5;
    if place_meeting(x+var_hspFinal,y-var_yPlus,par_block)
    {
        while(!place_meeting(x+sign(var_hspFinal),y,par_block)) //Collisions
        {
            x += sign(var_hspFinal);
        }
        var_hspFinal = 0;
        var_hsp = 0;
        var_hspCarry = 0;
    }
    else
    {
        y-= var_yPlus;
    }
    if var_yPlus &gt;= (var_ref_maxRunSpd* 0.5)/3 var_stat_maxRunSpd = ((var_ref_maxRunSpd * 0.75)/3)
    if var_yPlus &gt;= (var_ref_maxRunSpd* 0.75)/3 var_stat_maxRunSpd = ((var_ref_maxRunSpd * 0.5)/3)
}
else
{
    var_stat_maxRunSpd = var_ref_maxRunSpd
    if (place_meeting(x,y+1,par_block)) //Downward Slopes
    {
        if (!place_meeting(x+var_hspFinal,y,par_block))
        {
            var_yMinus = 0;
            while (!place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block) &amp;&amp; var_yMinus &lt;= abs(var_stat_maxRunSpd*2)) var_yMinus += 0.5;
            if (place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block))
            y+= var_yMinus;
        }
        if var_yMinus &gt;= (var_ref_maxRunSpd* 0.75)/3 var_stat_maxRunSpd = ((var_ref_maxRunSpd * 0.75)/3)
    }
}
x += var_hspFinal;
if keyboard_check_pressed(vk_up) and !place_meeting(x,y-23,par_block) //Stand up again
{
    if alarm[2] &lt; 0
    {
        var_anim_standup = 1
    }
}
if !place_meeting(x,y+1,par_block) and !place_meeting(x,y+1,par_platform) //Check if on ground
{
    var_bool_grounded = 0
}
if var_bool_grounded = 0 //Fall if not on ground
{
    var_action = 1
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action 4: Sprinting
//Sprint Mode
if var_action = 4
{
//Drain Stamina
var_hud_stamina -= 0.75
if var_hud_stamina &gt; 0
var_regenStaminaCheck = 120

if var_bool_grounded = 0 var_action = 1 //Stop Sprinting if in air
if var_move = 0 var_action = 1 //Stop Sprinting if not holding button

//Stop Sprinting if var_hud_stamina = 0
if var_hud_stamina &lt;= 0
var_action = 1

//Move Left and Right
var_move = key_left + key_right; 
if var_move = 0
{
    if var_bool_grounded = 1
    {
        if place_meeting(x,y+1,obj_iceblock)
        {
            var var_fric //Friction on the ground
            var_fric = 0.01
            if abs(var_hsp) &gt; var_fric then var_hsp=var_hsp*(1-var_fric) 
            else var_hsp = 0
        }
        else
        {
            var var_fric //Friction on the ground
            var_fric = 0.2
            if abs(var_hsp) &gt; var_fric then var_hsp=var_hsp*(1-var_fric) 
            else var_hsp = 0
        }
    }
}
else
{
    //Accelerate when on ground, slower when in air
    if (place_meeting(x,y+1,par_block)) or (place_meeting(x,y+1,par_platform)) and bbox_bottom &lt; plat.y
    {
        if !place_meeting(x,y+1,obj_iceblock)
        var_hsp += var_move * var_stat_accel
        else
        var_hsp += var_move * (var_stat_accel/4)
    }    
    else var_hsp += var_move * var_stat_accel/2.2
}

//Set Gravity and Limit Vspeed
if (var_vsp &lt; var_stat_maxFallSpd) var_vsp += var_stat_grav;

//Limit hspeed
if var_hsp &gt; var_stat_maxSprintSpd then var_hsp = var_stat_maxSprintSpd
if var_hsp &lt; -var_stat_maxSprintSpd then var_hsp = -var_stat_maxSprintSpd

//Include platform movement
var var_hspFinal = var_hsp + var_hspCarry;

//Horizontal Collision
if place_meeting(x+var_hspFinal,y,par_block)
{
    var_yPlus = 0;
    while (place_meeting(x+var_hspFinal,y-var_yPlus,par_block) &amp;&amp; var_yPlus &lt;= abs(var_stat_maxSprintSpd*2)) var_yPlus += 0.5;
    if place_meeting(x+var_hspFinal,y-var_yPlus,par_block)
    {
        while(!place_meeting(x+sign(var_hspFinal),y,par_block)) //Collisions
        {
            x += sign(var_hspFinal);
        }
        var_hspFinal = 0;
        var_hsp = 0;
        var_hspCarry = 0;
        var_action = 1
    }
    else
    {
        y-= var_yPlus;
    }
    if var_yPlus &gt;= (var_ref_maxSprintSpd* 0.5) var_stat_maxSprintSpd = (var_ref_maxSprintSpd * 0.75)
    if var_yPlus &gt;= (var_ref_maxSprintSpd* 0.75) var_stat_maxSprintSpd = (var_ref_maxSprintSpd * 0.5)
}
else
{
    var_stat_maxSprintSpd = var_ref_maxSprintSpd
    if (place_meeting(x,y+1,par_block)) //Downward Slopes
    {
        if (!place_meeting(x+var_hspFinal,y,par_block))
        {
            var_yMinus = 0;
            while (!place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block) &amp;&amp; var_yMinus &lt;= abs(var_stat_maxSprintSpd*2)) var_yMinus += 0.5;
            if (place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block))
            y+= var_yMinus;
        }
        if var_yMinus &gt;= (var_ref_maxSprintSpd* 0.75) var_stat_maxSprintSpd = (var_ref_maxSprintSpd * 0.75)
    }
}
x += var_hspFinal;

//Long Jump (jets)
if keyboard_check_pressed(ord("S")) and var_hud_battery &gt;= (var_equip_bootDrain * 20) and var_hud_heat &lt; (101 - var_equip_bootHeat1)
{
    if var_bool_grounded = 1
        {
            {
                audio_play_sound(snd_longjump,10,false) //Jump
                var_vsp -= var_equip_jetJumpF * 0.75
                alarm[0] = 52
                var_anim_jetJump = 1
                image_index = 0
//                if var_yPlus &gt;= (var_ref_maxSprintSpd* 0.5) or var_bool_onSlope = 1
//                {
//                    y -= 5
//                    var_vsp -= 2
//                }
                if var_yPlus &gt;= (var_ref_maxSprintSpd* 0.75) or var_bool_onSlope = 1
                {
                    y -= 5
                    var_vsp -= 3
                }
//                if var_yMinus &gt;= (var_ref_maxSprintSpd* 0.5) or var_bool_onSlope = 1
//                {
//                    y -= 5
//                    var_vsp += 2
//                }
                if var_yMinus &gt;= (var_ref_maxSprintSpd* 0.75) or var_bool_onSlope = 1
                {
                    y -= 5
                    var_vsp += 3
                }
                var_yPlus = 0
                var_yMinus = 0
                var_action = 5
                if var_facing = 1
                var_hsp += var_equip_jetJumpF
                else
                var_hsp -= var_equip_jetJumpF
                view_hspeed = var_stat_maxSprintSpd
                var_hud_battery -= var_equip_bootDrain * 20
                var_hud_heat += var_equip_bootHeat2 * 2
        }
    }
}

//Leap (no jets)
if keyboard_check_pressed(ord("A")) and var_hud_stamina &gt;= 5
{
    if var_bool_grounded = 1 and abs(var_hsp) &gt; abs(var_stat_maxSprintSpd * 0.75)
        {
                var_anim_standardJump = 1
                alarm[0] = 2
                var_vsp -= var_stat_standardJumpF * 1
                //if var_yPlus &gt;= (var_ref_maxSprintSpd* 0.5) var_vsp -= 1
                //if var_yPlus &gt;= (var_ref_maxSprintSpd* 0.75) var_vsp -= 2
                //if var_yMinus &gt;= (var_ref_maxSprintSpd* 0.5) var_vsp += 1
                //if var_yMinus &gt;= (var_ref_maxSprintSpd* 0.75) var_vsp += 2
                var_yPlus = 0
                var_yMinus = 0
                audio_play_sound(choose(snd_grunt1,snd_grunt2,snd_grunt3,snd_grunt4,snd_grunt5),10,false)
                var_action = 5
                view_hspeed = var_stat_maxSprintSpd
                var_hud_stamina -= 6
                var_regenStaminaCheck = 120
        }
    else if var_bool_grounded = 1
        {
                var_anim_standardJump = 1
                alarm[0] = 2
                var_vsp -= var_stat_standardJumpF
                var_action = 1
                var_hud_stamina -= 3
                var_regenStaminaCheck = 60
        }
}

//Reset var_yPlus and var_yMinus
var_yPlus = 0
var_yMinus = 0

//Vertical Collision
if place_meeting(x,y+var_vsp,par_block)
{
    while(!place_meeting(x,y+sign(var_vsp),par_block))
    {
        y += sign(var_vsp);
        audio_play_sound(Footsteptest,10,false) //Play Landing Sound
    }
    var_vsp = 0;
    var_hspCarry = 0;
    var_bool_grounded = 1
}

//Ledge Grab Check
if var_vsp &gt; 0
{
if keyboard_check(vk_right) //Grab Right
    {
        if place_meeting(x+1,(y-sprite_height/2)+var_vsp+1,par_block)
        {
            if !place_meeting(x+1,y-sprite_height/2+1,par_block)
            {
                while(!place_meeting(x+1,y-sprite_height/2+1,par_block))
                {
                    y += sign(var_vsp);
                }
                var_action = 2
                image_speed = 0.5
                var_vsp = 0;
            }
        }
    }
if keyboard_check(vk_left) //Grab Left
    {
        if place_meeting(x-1,(y-sprite_height/2)+var_vsp+1,par_block)
        {
            if !place_meeting(x-1,y-sprite_height/2+1,par_block)
            {
                while(!place_meeting(x-1,y-sprite_height/2+1,par_block))
                {
                    y += sign(var_vsp);
                }
                var_action = 2
                image_speed = 0.5
                var_vsp = 0;
            }
        }
    }
}

//Collision with Jumpthrough Platform
if place_meeting(x,y+var_vsp,par_platform) and var_vsp &gt; 0
{
    if plat != noone
    {
        if bbox_bottom &lt; plat.y
        {
            while(!place_meeting(x,y+sign(var_vsp),par_platform))
            {
                y += sign(var_vsp);
                audio_play_sound(Footsteptest,10,false) //Play Landing Sound
            }
            var_vsp = 0;
            var_hspCarry = 0;
            var_bool_grounded = 1
        }
    }
}
y += var_vsp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action 5: Longjumping
//Longjump
if var_action = 5
{
//Set mode to standard if decelerating enough
if var_facing = 1
{
    if var_hsp &lt;= 0
    {
        var_action = 1
        if keyboard_check(vk_right) and !keyboard_check(vk_left)
        var_facing = 1
        if !keyboard_check(vk_right) and keyboard_check(vk_left)
        var_facing = -1
    }
}
else
{
    if var_hsp &gt;= 0
    {
        var_action = 1
        if keyboard_check(vk_right) and !keyboard_check(vk_left)
        var_facing = 1
        if !keyboard_check(vk_right) and keyboard_check(vk_left)
        var_facing = -1
    }
}

//Doublejump
if keyboard_check_pressed(ord("S"))
{
    if var_jumpNumber &lt; var_equip_maxJumps and var_hud_heat &lt; (101 - var_equip_bootHeat2) and var_bool_grounded = 0 and var_hud_battery &gt; 0
    {
        audio_play_sound(choose(snd_jet1,snd_jet2,snd_jet3,snd_jet4),10,false) //Doublejump
        var_anim_standardJump = 0
        var_anim_jetJump = 1
        alarm[0]=8
        var_vsp -= var_equip_jetDJumpF
        var_jumpNumber += 1
        var_hud_heat += var_equip_bootHeat2
        var_hud_battery -= var_equip_bootDrain
    }
}

//Increase viewspeed to fix view lag
view_hspeed += 1

//Move Left and Right
var_move = key_left + key_right; 
if var_move != 0
{
    if var_facing = 1 and var_move = -1
    {
        //Accelerate when in air
        var_hsp += var_move * var_stat_accel/2.2
    }
    if var_facing = -1 and var_move = 1
    {
        //Accelerate when in air
        var_hsp += var_move * var_stat_accel/2.2
    }
}

//Set Gravity and Limit Vspeed
if (var_vsp &lt; var_stat_maxFallSpd) var_vsp += var_stat_grav;

//Limit hspeed
if var_hsp &gt; var_dep_maxLongJumpSpd then var_hsp = var_dep_maxLongJumpSpd
if var_hsp &lt; -var_dep_maxLongJumpSpd then var_hsp = -var_dep_maxLongJumpSpd

//Include platform movement
var var_hspFinal = var_hsp + var_hspCarry;

//Horizontal Collision
if place_meeting(x+var_hspFinal,y,par_block)
{
    while(!place_meeting(x+sign(var_hspFinal),y,par_block)) //Collisions
    {
        x += sign(var_hspFinal);
    }
    var_hspFinal = 0;
    var_hsp = 0;
    var_hspCarry = 0;
    var_action = 1
    if keyboard_check(vk_right) and !keyboard_check(vk_left)
    var_facing = 1
    if !keyboard_check(vk_right) and keyboard_check(vk_left)
    var_facing = -1
}
x += var_hspFinal;

//Vertical Collision
if place_meeting(x,y+var_vsp,par_block)
{
    while(!place_meeting(x,y+sign(var_vsp),par_block))
    {
        y += sign(var_vsp);
        audio_play_sound(Footsteptest,10,false) //Play Landing Sound
    }
    if var_vsp &gt; 0
    {
    var_action = 1
    if keyboard_check(vk_right) and !keyboard_check(vk_left)
    var_facing = 1
    if !keyboard_check(vk_right) and keyboard_check(vk_left)
    var_facing = -1
    }
    var_vsp = 0;
    var_hspCarry = 0;
    var_bool_grounded = 1
}

//Ledge Grab Check
if var_vsp &gt; 0
{
if keyboard_check(vk_right) //Grab Right
    {
        if place_meeting(x+1,(y-sprite_height/2)+var_vsp+1,par_block)
        {
            if !place_meeting(x+1,y-sprite_height/2+1,par_block)
            {
                while(!place_meeting(x+1,y-sprite_height/2+1,par_block))
                {
                    y += sign(var_vsp);
                }
                var_action = 2
                image_speed = 0.5
                var_vsp = 0;
            }
        }
    }
if keyboard_check(vk_left) //Grab Left
    {
        if place_meeting(x-1,(y-sprite_height/2)+var_vsp+1,par_block)
        {
            if !place_meeting(x-1,y-sprite_height/2+1,par_block)
            {
                while(!place_meeting(x-1,y-sprite_height/2+1,par_block))
                {
                    y += sign(var_vsp);
                }
                var_action = 2
                image_speed = 0.5
                var_vsp = 0;
            }
        }
    }
}

//Collision with Jumpthrough Platform
if place_meeting(x,y+var_vsp,par_platform) and var_vsp &gt; 0
{
    if plat != noone
    {
        if bbox_bottom &lt; plat.y
        {
            while(!place_meeting(x,y+sign(var_vsp),par_platform))
            {
                y += sign(var_vsp);
                audio_play_sound(Footsteptest,10,false) //Play Landing Sound
            }
            var_vsp = 0;
            var_hspCarry = 0;
            var_bool_grounded = 1
            var_action = 1
            if keyboard_check(vk_right) and !keyboard_check(vk_left)
            var_facing = 1
            if !keyboard_check(vk_right) and keyboard_check(vk_left)
            var_facing = -1
        }
        else
        var_bool_grounded = 0
    }
}
y += var_vsp;
}
else
var_anim_longJump = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action 6: Crouch Sprinting
//Crouch Sprint Mode
if var_action = 6
{
//Drain Stamina
var_hud_stamina -= 0.5
if var_hud_stamina &gt; 0
var_regenStaminaCheck = 120

if var_bool_grounded = 0 var_action = 1 //Stop Sprinting if in air
if var_move = 0 var_action = 3 //Stop Sprinting if not holding button

//Stop Sprinting if var_hud_stamina = 0
if var_hud_stamina &lt;= 0
var_action = 3

//Move Left and Right
var_move = key_left + key_right; 
if var_move = 0
{
    if var_bool_grounded = 1
    {
        if place_meeting(x,y+1,obj_iceblock)
        {
            var var_fric //Friction on the ground
            var_fric = 0.01
            if abs(var_hsp) &gt; var_fric then var_hsp=var_hsp*(1-var_fric) 
            else var_hsp = 0
        }
        else
        {
            var var_fric //Friction on the ground
            var_fric = 0.2
            if abs(var_hsp) &gt; var_fric then var_hsp=var_hsp*(1-var_fric) 
            else var_hsp = 0
        }
    }
}
else
{
    //Accelerate when on ground, slower when in air
    if (place_meeting(x,y+1,par_block)) or (place_meeting(x,y+1,par_platform)) and bbox_bottom &lt; plat.y
    {
        if !place_meeting(x,y+1,obj_iceblock)
        var_hsp += var_move * var_stat_accel
        else
        var_hsp += var_move * (var_stat_accel/4)
    }    
    else var_hsp += var_move * (var_stat_accel/3)
}

//Set Gravity and Limit Vspeed
if (var_vsp &lt; var_stat_maxFallSpd) var_vsp += var_stat_grav;

//Limit hspeed
if var_hsp &gt; var_stat_maxCrouchSprintSpd then var_hsp = var_stat_maxCrouchSprintSpd
if var_hsp &lt; -var_stat_maxCrouchSprintSpd then var_hsp = -var_stat_maxCrouchSprintSpd

//Include platform movement
var var_hspFinal = var_hsp + var_hspCarry;

//Horizontal Collision
if place_meeting(x+var_hspFinal,y,par_block)
{
    var_yPlus = 0;
    while (place_meeting(x+var_hspFinal,y-var_yPlus,par_block) &amp;&amp; var_yPlus &lt;= abs(var_stat_maxCrouchSprintSpd*2)) var_yPlus += 0.5;
    if place_meeting(x+var_hspFinal,y-var_yPlus,par_block)
    {
        while(!place_meeting(x+sign(var_hspFinal),y,par_block)) //Collisions
        {
            x += sign(var_hspFinal);
        }
        var_hspFinal = 0;
        var_hsp = 0;
        var_hspCarry = 0;
        var_action = 3
    }
    else
    {
        y-= var_yPlus;
    }
    if var_yPlus &gt;= (var_ref_maxCrouchSprintSpd* 0.5) var_stat_maxCrouchSprintSpd = (var_ref_maxCrouchSprintSpd * 0.75)
    if var_yPlus &gt;= (var_ref_maxCrouchSprintSpd* 0.75) var_stat_maxCrouchSprintSpd = (var_ref_maxCrouchSprintSpd * 0.5)
}
else
{
    var_stat_maxCrouchSprintSpd = var_ref_maxCrouchSprintSpd
    if (place_meeting(x,y+1,par_block)) //Downward Slopes
    {
        if (!place_meeting(x+var_hspFinal,y,par_block))
        {
            var_yMinus = 0;
            while (!place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block) &amp;&amp; var_yMinus &lt;= abs(var_stat_maxCrouchSprintSpd*2)) var_yMinus += 0.5;
            if (place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block))
            y+= var_yMinus;
        }
        if var_yMinus &gt;= (var_ref_maxCrouchSprintSpd* 0.75) var_stat_maxCrouchSprintSpd = (var_ref_maxCrouchSprintSpd * 0.75)
    }
}
x += var_hspFinal;

//Reset var_yPlus and var_yMinus
var_yPlus = 0
var_yMinus = 0

//Jump Out of Crouch
if keyboard_check_pressed(ord("S")) and !place_meeting(x,y-23,par_block) 
{
    if var_bool_grounded = 1
    {
        if place_meeting(x,y+1,par_platform) and keyboard_check(vk_down) //Fall through platforms if holding down while jumping on one
        {
            y+=1
            var_bool_grounded = 0
        }
        else
        {
            var_action = 1
            script_execute(scr_pc_jetJump, var_bool_grounded, var_anim_jetJump, var_anim_standardJump, var_vsp, var_equip_jetJumpF, var_hud_heat, var_equip_bootHeat1, var_hud_battery, var_equip_bootDrain, var_jumpNumber, var_equip_maxJumps, var_equip_bootHeat2, var_equip_jetDJumpF)
        }
    }
}
//Normal Jump out of crouch
if keyboard_check_pressed(ord("A"))
{
    if var_bool_grounded = 1
    {
        if place_meeting(x,y+1,par_platform) and keyboard_check(vk_down) //Fall through platforms if holding down while jumping on one
        {
            y+=1
            var_bool_grounded = 0
        }
        else
        {
            alarm[0]=2
            var_vsp -= normaljumpspeed
            var_anim_jetJump = 1
            var_anim_standardJump = 1
            var_bool_grounded = 0
        }
    }
}


//Vertical Collision
if place_meeting(x,y+var_vsp,par_block)
{
    while(!place_meeting(x,y+sign(var_vsp),par_block))
    {
        y += sign(var_vsp);
        audio_play_sound(Footsteptest,10,false) //Play Landing Sound
    }
    var_vsp = 0;
    var_hspCarry = 0;
    var_bool_grounded = 1
}

//Collision with Jumpthrough Platform
if place_meeting(x,y+var_vsp,par_platform) and var_vsp &gt; 0
{
    if plat != noone
    {
        if bbox_bottom &lt; plat.y
        {
            while(!place_meeting(x,y+sign(var_vsp),par_platform))
            {
                y += sign(var_vsp);
                audio_play_sound(Footsteptest,10,false) //Play Landing Sound
            }
            var_vsp = 0;
            var_hspCarry = 0;
            var_bool_grounded = 1
        }
    }
}
y += var_vsp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Sprites
//Set Animation Speed
if var_action = 1
{
    mask_index = var_spr_collision                          //Set collision box
    if var_bool_grounded = 1                                //While grounded
    {
        if !instance_place(x,y+1,obj_iceblock)              //If on ice
        {
        //Set Animation Speed when not on Ice
            if !(var_hsp = 0)                               //If horizontal speed not zero
            image_speed = abs(var_hsp)/10
            else
            image_speed = 0.5
            if abs(var_hsp) &lt;= var_stat_maxWalkSpd
            image_speed = abs(var_hsp)/7
        }
        else
        {//Set Animation Speed when on Ice
            if !(var_hsp = 0)
            image_speed = abs(var_hsp)/10*1.5
            else
            image_speed = 0.5
            if abs(var_hsp) &lt;= var_stat_maxWalkSpd
            image_speed = abs(var_hsp)/7*1.5
        }
    }
    else
    {
        image_speed = 0.5
    }
    
    ///////////////////////////////Set Jump Sprites if in the air//////////////////
    if var_bool_grounded = 0
    {
        if var_anim_jetJump=0
        {
            if var_vsp &lt; -0.5
            {
                if var_facing = 1
                sprite_index = var_spr_jetJumpRightUp
                else
                sprite_index = var_spr_jetJumpLeftUp
            }
            else if var_vsp &gt; 0.5
            {
                if var_facing = 1
                sprite_index = var_spr_jetJumpRightDown
                else
                sprite_index = var_spr_jetJumpLeftDown
            }
            else
            {
                if var_facing = 1
                sprite_index = var_spr_jetJumpRightPeak
                else
                sprite_index = var_spr_jetJumpLeftPeak
        }
        }
        else
        {
            if var_anim_repulsorJump = 0
            {
                if var_facing = 1
                    sprite_index = var_spr_jetJumpRightStart
                if var_facing = -1
                    sprite_index = var_spr_jetJumpLeftStart
            }
            else if var_anim_repulsorJump = 1
            {
                if var_facing = 1
                    sprite_index = var_spr_repulsorJumpRightStart
                if var_facing = -1
                    sprite_index = var_spr_repulsorJumpLeftStart
            }
        }
        ////////////////////////////Set Normal Jump Sprites///////////////////////
        if var_anim_standardJump = 1
        {
            if var_facing = 1 sprite_index = var_spr_normalJumpRight
            else sprite_index = var_spr_normalJumpLeft
            if var_anim_jetJump = 0
            {
                if var_vsp &lt; -1 image_index = 1
                else
                if var_vsp &lt; -0.5 image_index = 2
                if var_vsp &gt; 1 image_index = 5
                else
                if var_vsp &gt; 0.5 image_index = 4
                if var_vsp &lt;= 0.5 and var_vsp &gt;= -0.5 image_index = 3
            }
            if var_anim_jetJump = 1
            image_index = 0
        }
    }
    
    ///////////////////////////////Set Ground Sprites/////////////////////////////////
    if var_bool_grounded = 1
    {
        if var_hsp = 0                                      //If horizontally still
        //Set Stand Sprites---------------------------------------------------------------
        {
            if var_facing = 1                               //and if looking to the right
                sprite_index = var_spr_standRight           //set sprites to standing right
            else if var_facing = -1                         //otherwise if looking to the left
                sprite_index = var_spr_standLeft            //set sprites to
        }
        else if var_hsp != 0 
        {
            //Set up Slope Sprites--------------------------------------------------------
            if place_meeting(x+var_hspFinal,y,par_block)
            {
                while (place_meeting(x+var_hspFinal,y-var_yPlus,par_block) &amp;&amp; var_yPlus &lt;= abs(var_stat_maxRunSpd*2)) var_yPlus += 0.5;
                if !place_meeting(x+var_hspFinal,y-var_yPlus,par_block)
                {
                    if var_yPlus &gt; 0
                    {   
                        //Up slopes to the right------------------------------------------
                        var_bool_onSlope = 1
                        alarm[6] = 5 // Five frames before resetting slope sprites
                        if var_facing = 1 
                        {
                            if abs(var_hspFinal) &gt; var_stat_maxWalkSpd
                                sprite_index = var_spr_runRightUpSlope
                            else if abs(var_hspFinal) &lt;= var_stat_maxWalkSpd
                                sprite_index = var_spr_walkRightUpSlope
                        }        
                        //Up slopes to the left-------------------------------------------
                        if var_facing = -1
                        {
                            if abs(var_hspFinal) &gt; var_stat_maxWalkSpd
                                sprite_index = var_spr_runLeftUpSlope
                            else if abs(var_hspFinal) &lt;= var_stat_maxWalkSpd
                                sprite_index = var_spr_walkLeftUpSlope
                        }        
                    }
                }
            }
            //Set down Slope Sprites--------------------------------------------------------
            else if (place_meeting(x,y+1,par_block))
            {
                while (!place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block) &amp;&amp; var_yMinus &lt;= abs(var_stat_maxRunSpd*2)) var_yMinus += 0.5;
                if (place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block))
                {
                    if var_yMinus &gt; 0
                    {
                        //Down slopes to the right------------------------------------------
                        var_bool_onSlope = 1
                        alarm[6] = 5 // Five frames before resetting slope sprites
                        if var_facing = 1 
                        {
                            if abs(var_hspFinal) &gt; var_stat_maxWalkSpd
                                sprite_index = var_spr_runRightDownSlope
                            else if abs(var_hspFinal) &lt;= var_stat_maxWalkSpd
                                sprite_index = var_spr_walkRightDownSlope
                        }        
                        //Down slopes to the left-------------------------------------------
                        if var_facing = -1
                        {
                            if abs(var_hspFinal) &gt; var_stat_maxWalkSpd
                                sprite_index = var_spr_runLeftDownSlope
                            else if abs(var_hspFinal) &lt;= var_stat_maxWalkSpd
                                sprite_index = var_spr_walkLeftDownSlope
                        }        
                    }
                }
            }
            //Set Moving Sprites with no slope conditions--------------------------------------------------  
            if var_bool_onSlope = 0
            {
                script_execute(scr_pc_orion_walk_runSprites, var_facing, var_hsp, var_stat_maxWalkSpd, var_spr_walkRight, var_spr_runRight, var_spr_walkLeft, var_spr_runLeft)
            } 
        }
        if (round(image_index) = 3 or round(image_index) = 8) and !audio_is_playing(Footsteptest) //Playfootstep noise
        audio_play_sound(Footsteptest,10,false)
    }
}







//Set Ledge Sprites
if var_action = 2
{
if var_anim_climb = 0
    {
    if var_anim_ledgeSwing = 0 
    {
        if var_facing = 1
        sprite_index = var_spr_ledgeHangRight
        else
        sprite_index = var_spr_ledgeHangLeft
        if round(image_index) = 2
        var_anim_ledgeSwing = 1
    }
    else
    {
        image_speed = 0.1
        if var_facing = 1
        sprite_index = var_spr_ledgeSwingRight
        else
        sprite_index = var_spr_ledgeSwingLeft
    }
    }
if var_anim_climb = 1
    {
    mask_index = -1
    image_speed = 0.5
    var_bool_grounded = 1
    if var_facing = 1
        {
        sprite_index = var_spr_ledgeClimbRight
        if view_xview + 400 &lt; x+16
        view_xview += 0.8
        if view_yview + 140 &gt; y -50
        view_yview -= 2.5
        }
    else
        {
        sprite_index = var_spr_ledgeClimbLeft
        if view_xview + 240 &gt; x-16
        view_xview -= 0.8
        if view_yview + 140 &gt; y -50
        view_yview -= 2.5
        }
    if round(image_index) = 9 alarm[1] = 1
    }
}





/////////////////////////////////////Set Crouch Sprites//////////////////////////////
if var_action = 3
{
    //If not standing up from crouch-------------------------------------------------
    if var_anim_standup = 0
    {
        mask_index = var_spr_crouchCollision
        //Crouching still -- not crouch walking--------------------------------------
        if var_hsp = 0
        {
            if var_facing = 1
                sprite_index = var_spr_crouchRight
            if var_facing = -1
                sprite_index = var_spr_crouchLeft
            if round(image_index) = 3 or var_anim_crouch = 0  
            {
                var_anim_crouch = 0
                image_index = 3
                image_speed = 0
            }
        }
        //Crouching while moving -- crouch walking-----------------------------------
        else
        {
            image_speed = abs(var_hsp)/7
            var_anim_crouch = 0
            if var_yMinus &gt; 0 
            {
                var_bool_onSlope = 1
                alarm[6] = 5
                if var_facing = 1                                               //Facing right down slope
                    sprite_index = var_spr_crouchWalkRightDownSlope
                if var_facing = -1                                              //Facing left down slope
                    sprite_index = var_spr_crouchWalkLeftDownSlope    
            }
            else if var_yPlus &gt; 0
            {
                var_bool_onSlope = 1
                alarm[6] = 5
                if var_facing = 1                                               //Facing right up slope
                    sprite_index = var_spr_crouchWalkRightUpSlope
                if var_facing = -1                                              //Facing left up slope
                    sprite_index = var_spr_crouchWalkLeftUpSlope    
            }
            if var_bool_onSlope = 0
            {
                if var_facing = 1                                               //Facing right no slope
                    sprite_index = var_spr_crouchWalkRight
                if var_facing = -1                                              //Facing left no slope
                    sprite_index = var_spr_crouchWalkLeft
            }
        }
    }
    //If standing up from crouch------------------------------------------------------
    if var_anim_standup = 1
    {
        image_speed = 0.5
        mask_index = var_spr_collision
        if var_facing = 1
            sprite_index = var_spr_standupRight
        else
            sprite_index = var_spr_standupLeft
        if round(image_index) = 2
        {
            var_anim_standup = 0
            var_action = 1
        }
    }
}







//Set Sprint Sprites
if var_action = 4
{
    if var_bool_grounded = 1
    {
        if !(var_hsp = 0)
            image_speed = abs(var_hsp)/10
        else
            image_speed = 0.5
    }
    else
    {
        image_speed = 0.5
    }
    {
        if var_facing = 1
            sprite_index = var_spr_sprintRight
        else
            sprite_index = var_spr_sprintLeft
    }
    if place_meeting(x+var_hspFinal,y,par_block) //Set Run up Slope Sprites
    {
        var_yPlus = 0;
        while (place_meeting(x+var_hspFinal,y-var_yPlus,par_block) &amp;&amp; var_yPlus &lt;= abs(var_stat_maxSprintSpd*2)) var_yPlus += 0.5;
        if !place_meeting(x+var_hspFinal,y-var_yPlus,par_block)
        {
            if var_yPlus &gt; 2
            {
                if var_facing = 1
                    sprite_index = var_spr_sprintRightUpSlope
                else
                    sprite_index = var_spr_sprintLeftUpSlope
            }
            else if var_yPlus &gt; 0
            {
                if var_facing = 1
                    sprite_index = var_spr_sprintRightUpSlope
                else
                    sprite_index = var_spr_sprintLeftUpSlope
            }
        }
    }
    if (place_meeting(x,y+1,par_block)) //Set Down Slope Sprites
    {
        var_yMinus = 0;
        while (!place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block) &amp;&amp; var_yMinus &lt;= abs(var_stat_maxSprintSpd*2)) var_yMinus += 0.5;
            if (place_meeting(x+var_hspFinal,y+1+var_yMinus,par_block))
            {
                if var_yMinus &gt; 2
                {
                    if var_facing = 1
                        sprite_index = var_spr_sprintRightDownSlope
                    else
                        sprite_index = var_spr_sprintLeftDownSlope
                }
                else if var_yMinus &gt; 0
                {
                    if var_facing = 1
                        sprite_index = var_spr_sprintRightDownSlope
                    else
                        sprite_index = var_spr_sprintLeftDownSlope
                }
            }
    }
    if (round(image_index) = 3 or round(image_index) = 8) and !audio_is_playing(Footsteptest) //Playfootstep noise
        audio_play_sound(Footsteptest,10,false)
}









//Set Longjump Sprites
if var_action = 5
{
    var_anim_longJump = 1
    if var_anim_standardJump = 0
    {
        if var_facing = 1
            sprite_index = var_spr_longJumpRight
        if var_facing = -1
            sprite_index = var_spr_longJumpLeft
        if var_vsp &gt;= -1.5
        {
            if image_index = 10
            image_speed = 0
            else
            image_speed = 0.25
        }
        else
        {
        if image_index = 4
        image_speed = 0
        }
        if image_index &lt; 4
            image_speed = 0.5
    }
    //Set Normal Jump Sprites
    if var_anim_standardJump = 1
    {
        if var_facing = 1 
            sprite_index = var_spr_leapRight
        else 
            sprite_index = var_spr_leapLeft
        {
            if image_index = 2
                image_speed = 0
            else
                image_index = 1
            if var_vsp &gt; 0
                image_index = 4
            if var_vsp &gt; 1
                image_index = 5
            if var_vsp &gt; 2
                image_index = 6
        }
    }
}

//Set Crouch Sprint Sprites
if var_action = 6
{
    image_speed = abs(var_hsp)/10*1.5
    if var_facing = 1
        sprite_index = var_spr_crouchSprintRight
    if var_facing = -1
        sprite_index = var_spr_crouchSprintLeft
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>0</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>7,3</point>
    <point>21,3</point>
    <point>21,48</point>
    <point>7,48</point>
  </PhysicsShapePoints>
</object>
